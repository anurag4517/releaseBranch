

pipeline{
    agent {
        label 'main'
    }
    environment {
        
        GITHUB_API_TOKEN = credentials('GITHUB_API_TOKEN')
        // auth = credentials('githubaccesspat')
        
        
    }
    parameters
    {
        string(description: 'Specify github username for who needs to create release branch', name: 'username', defaultValue: 'htiwari1987') 
        string(description: 'Specify name of organization in which repo recides', name: 'organization', defaultValue: 'salesforcedocs')
        string(description: 'Name of repo to create release branch ', name: 'REPO_NAME',defaultValue: 'anurag-test-repo')
        string(description: 'Specify the release branch name', name: 'release_name',defaultValue: 'rel/230')
        booleanParam(description: 'Force create branch ', name: 'forcecreate', defaultValue: false)
    }
        
        
    stages{
        stage('Initialize the variables') {
            // Each stage is made up of steps
            steps{
                script{
                     baseUrl = "https://api.github.com"
                     accept = "Accept: application/vnd.github+json"
                     auth="Authorization: Bearer ".concat("${GITHUB_API_TOKEN}")
                   }
            }                
        }
        stage("Check if user is maintainer of repo ")
        {
            steps {
                build job: 'checkMaintainer', parameters: [string(name: 'username', value: "${username}"), string(name: 'REPO_NAME', value: "${REPO_NAME}")]
   
            }
        }

       
        
        stage("Create release branch")
        {
           steps {
            script 
            {
                
                createReleaseBranch()
                
            }
           } 
        }
        
        stage("Enable only Squash and merge in PR ")
        {
           steps {
            script 
            {
                enableSquashandMerge()
                
                
            }
           } 
        }
        stage("Enable Branch Protections for release branch")
        {
           steps {
            script 
            {
                enableBranchProtection()    
            }
           } 
        }


         
        }   
}
def enableBranchProtection()
{
   String url = "${baseUrl}/repos/salesforcedocs/${params.REPO_NAME}/branches/${params.release_name}/protection"
    String payload = '{"required_status_checks": null,"enforce_admins": true,"required_pull_request_reviews": {"dismissal_restrictions": {},"dismiss_stale_reviews": false,"require_code_owner_reviews": false,"required_approving_review_count": 1,"require_last_push_approval": true,"bypass_pull_request_allowances": {}},"restrictions": {"users": [],"teams": [],"apps": []},"required_linear_history": false,"allow_force_pushes": false,"allow_deletions": false,"block_creations": true,"required_conversation_resolution": true,"lock_branch": false,"allow_fork_syncing": false}'
    response = hitPutApi(url,payload)
    validateStatusCode(response,'200','Branch Protection')
}

def enableSquashandMerge()
{
   String url = "${baseUrl}/repos/salesforcedocs/${params.REPO_NAME}"
    String payload = '{"allow_squash_merge": true,"allow_merge_commit": false,"allow_rebase_merge": false}'
    response = hitPatchApi(url,payload)
    validateStatusCode(response,'200','Squash Merge')
}

def validateStatusCode(String response , String expectedResponse , String identity)
{
       if(response!=expectedResponse){
                            error("!!! Unable to find with given parameters : ${identity}") 
        }
} 
def createReleaseBranch()
{
    cloneRepo()
    checkIfBranchExists()
}

def cloneRepo()
{
    boolean status=checkIfBranchExists() 
    if(!status)
    {
    sh(script: """ rm -rf ${REPO_NAME};git clone --single-branch https://git:${GITHUB_API_TOKEN}@github.com/salesforcedocs/${REPO_NAME}.git ${REPO_NAME}; cd ${REPO_NAME} ; git checkout -b ${release_name};echo \"Creating a new release ${release_name}\">> README.md ; git add .;git commit -m \"Creating a new release ${release_name}\";git push --set-upstream origin ${release_name}

      """, returnStdout: true).trim()
    }else { error( 'Branch already exists in repo  ' )}
}

def checkIfBranchExists()
{
    try {
    sh(script: """ rm -rf ${REPO_NAME};git clone https://git:${GITHUB_API_TOKEN}@github.com/salesforcedocs/${REPO_NAME}.git --branch ${release_name} ${REPO_NAME} ; """, returnStdout: true).trim()
    return true;
    }catch(Exception ex) {
        return false

    }
}
def hitGetApi(String urlasked)
{
      
      def(String response , int code) = sh(script: "curl ${urlasked}  -H \"${accept}\" -H \"${auth}\" -o /dev/null -w \"%{http_code}\"", returnStdout: true).trim().tokenize("\n")
      echo "HTTP response response : ${response}"
      return response
      

}
def hitPatchApi(String url , String payload)
{
    def(String response , int code) = sh(script: """ curl -X PATCH ${url}  -H \"${accept}\" -H \"${auth}\" -d \'${payload}\' -o /dev/null -w \"%{http_code}\"  """, returnStdout: true).trim().tokenize("\n")
      echo "HTTP response response : ${response}"
      return response

}

def hitPutApi(String url , String payload)
{
    def(String response , int code) = sh(script: """ curl -X PUT ${url}  -H \"${accept}\" -H \"${auth}\" -d \'${payload}\' -o /dev/null -w \"%{http_code}\"  """, returnStdout: true).trim().tokenize("\n")
      echo "HTTP response response : ${response}"
      return response

}






