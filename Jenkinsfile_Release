

pipeline{
    agent {
        label 'main'
    }
    environment {
        
        GITHUB_API_TOKEN = credentials('GITHUB_API_TOKEN')    
    }
    parameters
    {
        string(description: 'Specify github USERNAME for who needs to create release branch', name: 'USERNAME', defaultValue: 'htiwari1987') 
        string(description: 'Specify name of ORGANIZATION in which repo recides', name: 'ORGANIZATION', defaultValue: 'salesforcedocs')
        string(description: 'Name of repo to create release branch ', name: 'REPO_NAME',defaultValue: 'anurag-test-repo')
        string(description: 'Specify the release branch name', name: 'RELEASE_NAME',defaultValue: '250')
        
    }
        
        
    stages{
        stage('Initialize the variables') {
            // Each stage is made up of steps
            steps{
                script{
                     baseUrl = "https://api.github.com"
                     accept = "Accept: application/vnd.github+json"
                     auth="Authorization: Bearer ".concat("${GITHUB_API_TOKEN}")
                   }
            }                
        }
       
        
        stage("Create a Release and Release Notes")
        {
           steps {
            script 
            {
                isMaintiner()
                createRelease()
                
            }
           } 
        }
        
        
         
        }   
}

def createRelease()
{
    String url = "${baseUrl}/repos/salesforcedocs/${params.REPO_NAME}/releases/latest"
    result=sh(script: "curl ${url}  -H \"${accept}\" -H \"${auth}\" | python -c \"import sys,json; print json.load(sys.stdin)['tag_name']\" ", returnStdout: true).trim().tokenize("\n")
    echo '-------Previous Tag Released -------------'
    String previousTagName=result[0]
    echo "${previousTagName}"
    def majorVersion = "${params.RELEASE_NAME}".toInteger()
    def minorVersion = 0
    previousMajorVersion=previousTagName.split('\\.')[0].toInteger()
    if (majorVersion!=previousMajorVersion){
        minorVersion=0
    }
    else{
        try {
            minorVersion=previousTagName.split('\\.')[1].toInteger() + 1
        }catch(Exception ex) {
             minorVersion = 0}
    }         
    
    String tagName = majorVersion.toString() + "." + minorVersion.toString()

    echo 'Tag name is -----> '
    echo "${tagName}"
    
    generateRelease(tagName,"${params.RELEASE_NAME}")

}


def validateStatusCode(String response , String expectedResponse , String identity)
{
       if(response!=expectedResponse){
                            error("!!! Unable to find with given parameters : ${identity}") 
        }
} 



def generateRelease(String tagName , String branch )
{
    String url = "${baseUrl}/repos/salesforcedocs/${params.REPO_NAME}/releases"
    String payload = "{\"tag_name\":\"${tagName}\",\"name\":\"${tagName}\",\"target_commitish\":\"${branch}\",\"generate_release_notes\": true}"
    response = hitPostApiReturnResponse(url,payload)
}





def hitGetApi(String urlasked)
{
      
      def(String response , int code) = sh(script: "curl ${urlasked}  -H \"${accept}\" -H \"${auth}\" -o /dev/null -w \"%{http_code}\"", returnStdout: true).trim().tokenize("\n")
      echo "HTTP response response : ${response}"
      return response
      

}
def hitPostApi(String url , String payload)
{
    def(String response , int code) = sh(script: """ curl -X POST ${url}  -H \"${accept}\" -H \"${auth}\" -d \'${payload}\' -o /dev/null -w \"%{http_code}\"  """, returnStdout: true).trim().tokenize("\n")
      echo "HTTP response response : ${response}"
      return response

}

def hitPostApiReturnResponse(String url , String payload)
{
    def response  = sh(script: """ curl -X POST ${url}  -H \"${accept}\" -H \"${auth}\" -d \'${payload}\' | python -c \"import sys,json; print json.load(sys.stdin)"  """, returnStdout: true).trim().tokenize("\n")
      echo "HTTP response response : ${response}"
      return response

}



def hitPutApi(String url , String payload)
{
    def(String response , int code) = sh(script: """ curl -X PUT ${url}  -H \"${accept}\" -H \"${auth}\" -d \'${payload}\' -o /dev/null -w \"%{http_code}\"  """, returnStdout: true).trim().tokenize("\n")
      echo "HTTP response response : ${response}"
      return response

}


def isMaintiner()
{
    String team_slug= "ccx-" + params.REPO_NAME
    flag=checkRoleOfUser(team_slug)
    if(flag ==0) 
    {
        error( " User is not a maintainer of repo so cannot create a Branch . Kindly connect with #SFDocs and get added to ${team_slug} ")
    }
}


def checkRoleOfUser(String team_slug)
{
   
    String url = "${baseUrl}/orgs/salesforcedocs/teams/${team_slug}/memberships/${params.USERNAME}"
    userRole = returnRole(url)
    if(userRole!='NA')
    {
    int flag =0 ;
    for(String myrole : userRole)
    {
        echo myrole
        if(myrole == 'maintainer') {
            echo 'Success------> Maintainer  '
            
            flag=1 ; return flag;
        }else { 
            echo myrole 
            echo params.userrole
            echo '---Looping----- '
            
        }
    }
    return flag 

    }
    else { return 0 }
    
}

def returnRole(String urlasked)
{
    
    check = hitGetApi(urlasked)
    if(check!="404"){
        echo 'Previous role is assigned returning role '
    def role = sh(script: "curl ${urlasked}  -H \"${accept}\" -H \"${auth}\" | python -c \"import sys,json; print json.load(sys.stdin)['role']\" ", returnStdout: true).trim().tokenize("\n")
    return role
    }else { 
        echo 'No previous role was assigned here---> Need to assign a role  '
    return 'NA'
    }
   

}

